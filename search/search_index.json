{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#statement-of-need","title":"Statement of need","text":"<p><code>cifkit</code> uses .cif files by offering higher-level functions and variables that enable users to perform complex tasks efficiently with a few lines of code. <code>cifkit</code> distinguishes itself from existing libraries by offering higher-level functions and variables that allow solid-state synthesists to obtain intuitive and measurable properties impactful properties. It facilitates the visualization of coordination geometry from each site using four coordination determination methods and extracts physics-based features like volume and packing efficiency\u2014crucial for structural analysis in machine learning tasks. Moreover, <code>cifkit</code> extracts atomic mixing information at the bond pair level, tasks that would otherwise require extensive manual effort using GUI-based tools like VESTA, Diamond, and CrystalMaker.</p> <p><code>cifkit</code> further enhances its utility by providing functions for sorting, preprocessing, and analyzing the distribution of underlying CIF files. It systematically addresses common issues in CIF files from databases, such as incorrect loop values and missing fractional coordinates, by standardizing and filtering out ill-formatted files. The package also preprocesses atomic site labels, transforming labels like 'M1' to 'Fe1' in files with atomic mixing for improved visualization and pattern matching. Beyond error correction, <code>cifkit</code> offers functionalities to copy, move, and sort files based on attributes such as coordination numbers, space groups, unit cells, and shortest distances. It excels in visualizing and cataloging CIF files, organizing them by supercell size, tags, coordination numbers, elements, and atomic mixing.</p>"},{"location":"#tldr","title":"TL;DR","text":"<p><code>cifkit</code> provides higher-level functions in just a few lines of code.</p> <ul> <li>Coordination geometry - <code>cifkit</code> provides functions for visualing   coordination geometry from each site and extracts physics-based features like   volume and packing efficiency in each polyhedron.</li> <li>Atomic mixing - <code>cifkit</code> extracts atomic mixing information at the bond   pair level\u2014tasks that would otherwise require extensive manual effort using   GUI-based tools like VESTA, Diamond, and CrystalMaker.</li> <li>Filter - <code>cifkit</code> offers features for preprocessing. It systematically   addresses common issues in CIF files from databases, such as incorrect loop   values and missing fractional coordinates, by standardizing and filtering out   ill-formatted files. It also preprocesses atomic site labels, transforming   labels such as 'M1' to 'Fe1' in files with atomic mixing.</li> <li>Sort - <code>cifkit</code> allows you to copy, move, and sort <code>.cif</code> files based on   attributes such as coordination numbers, space groups, unit cells, shortest   distances, elements, and more.</li> </ul>"},{"location":"#processing-speed-expectation","title":"Processing speed expectation","text":"<p>Processing approximately 10,000 .cif files on a standard laptop (iMac with M1 chip) may take about 30 to 60 minutes. At this rate, we can process nearly all .cif files within 1\u20132 days.</p>"},{"location":"#installation","title":"Installation","text":"<p>Python 3.10, 3.11, 3.12 are supported.</p> <p> </p> <p>pip install</p> <pre><code>pip install cifkit\n</code></pre>"},{"location":"#overview","title":"Overview","text":"<p><code>cifkit</code> provide two primary classes: <code>Cif</code> and <code>CifEnsemble</code>.</p>"},{"location":"#cif","title":"Cif","text":"<p><code>Cif</code> is initialized with a <code>.cif</code> file path. It parses the <code>.cif</code> file, generates supercells, and computes nearest neighbors. It also determines coordination numbers using four different methods and generates polyhedrons for each site.</p> <p>The example below uses <code>cifkit</code> to visualize the polyhedron generated from each atomic site based on the coordination number geometry.</p> <pre><code>from cifkit import Cif\n\ncif = Cif(\"your_cif_file_path\")\nsite_labels = cif.site_labels\n\n# Loop through each site label\nfor label in site_labels:\n    # Dipslay each polyhedron, .png saved for each label\n    cif.plot_polyhedron(label, is_displayed=True)\n</code></pre> <p></p>"},{"location":"#cifensemble","title":"CifEnsemble","text":"<p><code>CifEnsemble</code> is initialized with a folder path containing <code>.cif</code> files. It identifies unique attributes, such as space groups and elements, across the <code>.cif</code> files, moves and copies files based on these attributes. It generates histograms for all attributes.</p> <p>The following example generates a distribution of structure.</p> <pre><code>from cifkit import CifEnsemble\n\nensemble = CifEnsemble(\"your_cif_containing_folder_path\")\nensemble.generate_structure_histogram()\n</code></pre> <p></p> <p>Basde on your visual histogram above, you can copy and move .cif files based on specific attributes:</p> <pre><code># Return file paths matching structures either Co1.75Ge or CoIn2\nensemble.filter_by_structures([\"Co1.75Ge\", \"CoIn2\"])\n\n# Return file path matching CeAl2Ga2\nensemble.filter_by_structures(\"CeAl2Ga2\")\n</code></pre>"},{"location":"#research-projects-using-cifkit","title":"Research projects using <code>cifkit</code>","text":"<p>The below projects uses the <code>Cif</code> and <code>CifEnsemble</code> classes for research applications.</p> <ul> <li>CIF Bond Analyzer (CBA) - extract and visualize bonding patterns -   DOI |   GitHub |   Poster</li> <li>Structure Analysis/Featurizer (SAF) - build geometric features for binary,   ternary compounds -   GitHub</li> <li>CIF Cleaner - move, copy .cif files based on attributes   GitHub</li> </ul>"},{"location":"#how-to-ask-for-help","title":"How to ask for help","text":"<p><code>cifkit</code> is also designed for experimental materials scientists and chemists.</p> <ul> <li>If you have any issues or questions, please feel free to reach out to Bob Lee   @bobleesj or   leave an issue.</li> </ul>"},{"location":"#how-to-contribute-to-cifkit","title":"How to contribute to <code>cifkit</code>","text":"<p>Here is how you can contribute to the <code>cifkit</code> project if you found it helpful:</p> <ul> <li>Star the repository on GitHub and recommend it to your colleagues who might   find <code>cifkit</code> helpful as well.   </li> <li>Create a new issue for any bugs or feature requests   here</li> <li>Fork the repository and consider contributing changes via a pull request.   .   Check out   CONTRIBUTING.md   for instructions.</li> <li>If you have any suggestions or need further clarification on how to use   <code>cifkit</code>, please reach out to Bob Lee   (@bobleesj).</li> </ul>"},{"location":"#contributors","title":"Contributors","text":"<p><code>cifkit</code> has been greatly enhanced thanks to the contributions from a diverse group of researchers:</p> <ul> <li>Anton Oliynyk: original ideation with <code>.cif</code> files</li> <li>Alex Vtorov: tool recommendation for polyhedron visualization</li> <li>Danila Shiryaev: testing as beta user</li> <li>Fabian Zills (@PythonFZ): suggested tooling   improvements</li> <li>Emil Jaffal (@EmilJaffal): initial testing   and bug report</li> <li>Nikhil Kumar Barua: initial testing and bug report</li> <li>Nishant Yadav (@sethisiddha1998):   initial testing and bug report</li> <li>Siddha Sankalpa Sethi (@runzsh): initial testing   and bug report in initial testing and initial testing and bug report</li> </ul> <p>We welcome all forms of contributions from the community. Your ideas and improvements are valued and appreciated.</p>"},{"location":"#citation","title":"Citation","text":"<p>Please consider citing <code>cifkit</code> if it has been useful for your research:</p> <p>Note: the <code>cifkit</code> manuscript is also under reviewed by the Journal of Open Source Software.</p> <p></p>"},{"location":"#other-links","title":"Other links","text":"<ul> <li>Contribution guide</li> <li>MIT license</li> </ul>"},{"location":"api/","title":"API reference","text":"<p>This section contains the automatic API reference for <code>Cif</code> and <code>CifEnsemble</code> modules in the <code>cifkit</code> package.</p>"},{"location":"api/#cifkit","title":"<code>cifkit</code>","text":"<p>Python package for doing science.</p>"},{"location":"notebooks/01_cif/","title":"CIF","text":"<p>You can initialize <code>Cif</code> object using a file path to the <code>.cif</code> file. Or you can simply use the example <code>.cif</code> provided in <code>cifkit</code> below.</p> <p>In <code>cifkit</code> we provide .cif files that can be accessed through <code>from cifkit import Example</code> as shown below. For advancuser, these example .cif files are located under <code>src/cifkit/data</code> in the package.</p> In\u00a0[\u00a0]: Copied! <pre>from cifkit import Example\nfrom cifkit import Cif\n\n# Initialize with the example file provided\ncif = Cif(Example.Er10Co9In20_file_path)\n\n# Print attributes\nprint(\"File name:\", cif.file_name)\nprint(\"Formula:\", cif.formula)\nprint(\"Unique element:\", cif.unique_elements)\n</pre> from cifkit import Example from cifkit import Cif  # Initialize with the example file provided cif = Cif(Example.Er10Co9In20_file_path)  # Print attributes print(\"File name:\", cif.file_name) print(\"Formula:\", cif.formula) print(\"Unique element:\", cif.unique_elements) In\u00a0[\u00a0]: Copied! <pre>from cifkit import Cif, Example\nimport json\n\n# Utility function for printing dictionary\ndef prettify_dict(dict_data):\n  return json.dumps(dict_data, indent=4)\n\n# Initialize\ncif = Cif(Example.ErCoIn5_file_path)\n\n# Print instantly available properties\nprint(\"Formula:\", cif.formula)\nprint(\"Structure:\", cif.structure)\nprint(\"Unique elements:\", cif.unique_elements)\nprint(\"Unitcell lengths:\", cif.unitcell_lengths)\nprint(\"Unitcell angles:\", cif.unitcell_angles)\nprint(\"Site labels:\", cif.site_labels)\nprint(\"Weight:\", cif.weight)\nprint(\"Atomic mixing type:\", cif.site_mixing_type)\nprint(\"Space group number:\", cif.space_group_number)\nprint(\"Space group number:\", cif.space_group_name)\nprint(\"Composition type:\", cif.composition_type) # 3 -&gt; Ternary\nprint(\"Tag:\", cif.tag)\nprint(\"Atom_site_info:\", prettify_dict(cif.atom_site_info))\nprint(\"Wyckoff_symbol of Er1:\", cif.atom_site_info[\"Er\"][\"wyckoff_symbol\"])\n</pre> from cifkit import Cif, Example import json  # Utility function for printing dictionary def prettify_dict(dict_data):   return json.dumps(dict_data, indent=4)  # Initialize cif = Cif(Example.ErCoIn5_file_path)  # Print instantly available properties print(\"Formula:\", cif.formula) print(\"Structure:\", cif.structure) print(\"Unique elements:\", cif.unique_elements) print(\"Unitcell lengths:\", cif.unitcell_lengths) print(\"Unitcell angles:\", cif.unitcell_angles) print(\"Site labels:\", cif.site_labels) print(\"Weight:\", cif.weight) print(\"Atomic mixing type:\", cif.site_mixing_type) print(\"Space group number:\", cif.space_group_number) print(\"Space group number:\", cif.space_group_name) print(\"Composition type:\", cif.composition_type) # 3 -&gt; Ternary print(\"Tag:\", cif.tag) print(\"Atom_site_info:\", prettify_dict(cif.atom_site_info)) print(\"Wyckoff_symbol of Er1:\", cif.atom_site_info[\"Er\"][\"wyckoff_symbol\"]) In\u00a0[\u00a0]: Copied! <pre>from cifkit import Cif, Example\n\n# Initialize\ncif = Cif(Example.ErCoIn5_file_path)\n\n# Utility function for printing a set of tuples\ndef print_tuples(tuples):\n  for pair in tuples:\n    print(f\"({pair[0]}, {pair[1]})\")\n\n# All bond pairs\nprint(\"\\nAll possible bond pairs:\")\nprint_tuples(cif.bond_pairs)\n\nprint(\"\\nAll possible bond pairs sorted by Mendeleev:\")\nprint_tuples(cif.bond_pairs_sorted_by_mendeleev)\n\n# All label pairs\nprint(\"\\nAll possible label pairs from the formula:\")\nprint_tuples(cif.site_label_pairs)\n\nprint(\"\\nAll possible label pairs sorted by Mendeleev:\")\nprint_tuples(cif.site_label_pairs_sorted_by_mendeleev)\n\n# Atomic mixing per pair\nprint(\"\\nAtomic mixing per label pair:\")\nprint((cif.mixing_info_per_label_pair))\n\nprint(\"\\nAtomic mixing per label pair sorted by Mendeleev:\")\nprint(cif.mixing_info_per_label_pair_sorted_by_mendeleev)\n</pre> from cifkit import Cif, Example  # Initialize cif = Cif(Example.ErCoIn5_file_path)  # Utility function for printing a set of tuples def print_tuples(tuples):   for pair in tuples:     print(f\"({pair[0]}, {pair[1]})\")  # All bond pairs print(\"\\nAll possible bond pairs:\") print_tuples(cif.bond_pairs)  print(\"\\nAll possible bond pairs sorted by Mendeleev:\") print_tuples(cif.bond_pairs_sorted_by_mendeleev)  # All label pairs print(\"\\nAll possible label pairs from the formula:\") print_tuples(cif.site_label_pairs)  print(\"\\nAll possible label pairs sorted by Mendeleev:\") print_tuples(cif.site_label_pairs_sorted_by_mendeleev)  # Atomic mixing per pair print(\"\\nAtomic mixing per label pair:\") print((cif.mixing_info_per_label_pair))  print(\"\\nAtomic mixing per label pair sorted by Mendeleev:\") print(cif.mixing_info_per_label_pair_sorted_by_mendeleev)  In\u00a0[\u00a0]: Copied! <pre>from cifkit import Cif, Example\n\ndef print_connected_points(all_labels_connections):\n    \"\"\"\n    Utility function for printing connections per site label\n    \"\"\"\n    for label, connections in all_labels_connections.items():\n        print(f\"\\nAtom site {label}:\")\n        for (\n            connected_label,\n            dist,\n            coords_1,\n            coords_2,\n        ) in connections:\n            print(f\"{connected_label} {dist} {coords_1}, {coords_2}\")\n\n\n# Initialize\ncif = Cif(Example.ErCoIn5_file_path)\n\n# Print CN Connections\nprint(\"\\nFind CN_connections_by_min_dist_method:\")\nprint_connected_points(cif.CN_connections_by_min_dist_method)\n\nprint(\"\\nFind CN_connections_by_best_methods:\")\nprint_connected_points(cif.CN_connections_by_best_methods)\n</pre>  from cifkit import Cif, Example  def print_connected_points(all_labels_connections):     \"\"\"     Utility function for printing connections per site label     \"\"\"     for label, connections in all_labels_connections.items():         print(f\"\\nAtom site {label}:\")         for (             connected_label,             dist,             coords_1,             coords_2,         ) in connections:             print(f\"{connected_label} {dist} {coords_1}, {coords_2}\")   # Initialize cif = Cif(Example.ErCoIn5_file_path)  # Print CN Connections print(\"\\nFind CN_connections_by_min_dist_method:\") print_connected_points(cif.CN_connections_by_min_dist_method)  print(\"\\nFind CN_connections_by_best_methods:\") print_connected_points(cif.CN_connections_by_best_methods) In\u00a0[\u00a0]: Copied! <pre>from cifkit import Cif, Example\n\n# Initialize\ncif = Cif(Example.ErCoIn5_file_path)\n\nprint(\"Shortest distance:\", cif.shortest_distance)\nprint(\"Shortest bond pair distances:\", cif.shortest_bond_pair_distance)\nprint(\"Shortest site pair distances:\", cif.shortest_site_pair_distance)\n</pre> from cifkit import Cif, Example  # Initialize cif = Cif(Example.ErCoIn5_file_path)  print(\"Shortest distance:\", cif.shortest_distance) print(\"Shortest bond pair distances:\", cif.shortest_bond_pair_distance) print(\"Shortest site pair distances:\", cif.shortest_site_pair_distance) In\u00a0[\u00a0]: Copied! <pre>from cifkit import Cif, Example\n\n# Initialize\ncif = Cif(Example.ErCoIn5_file_path)\n\n# Bond counts\nprint(\"\\nCN_bond_count_by_min_dist_method:\")\nprint(cif.CN_bond_count_by_min_dist_method)\n\nprint(\"\\nCN_bond_count_by_min_dist_method_sorted_by_mendeleev:\")\nprint(cif.CN_bond_count_by_min_dist_method_sorted_by_mendeleev)\n\nprint(\"\\nCN_bond_count_by_best_methods:\")\nprint(cif.CN_bond_count_by_best_methods)\n\nprint(\"\\nCN_bond_count_by_best_methods_sorted_by_mendeleev:\")\nprint(cif.CN_bond_count_by_best_methods_sorted_by_mendeleev)\n\n# Bond fractions\nprint(\"\\nCN_bond_fractions_by_min_dist_method:\")\nprint(cif.CN_bond_fractions_by_min_dist_method)\n\nprint(\"\\nCN_bond_fractions_by_min_dist_method_sorted_by_mendeleev:\")\nprint(cif.CN_bond_fractions_by_min_dist_method_sorted_by_mendeleev)\n\nprint(\"\\nCN_bond_fractions_by_best_methods:\")\nprint(cif.CN_bond_fractions_by_best_methods)\n\nprint(\"\\nCN_bond_fractions_by_best_methods_sorted_by_mendeleev:\")\nprint(cif.CN_bond_fractions_by_best_methods_sorted_by_mendeleev)\n\n# Unique coordination numbers\nprint(\"\\nCN_unique_values_by_min_dist_method\")\nprint(cif.CN_unique_values_by_min_dist_method)\n\nprint(\"\\nCN_unique_values_by_best_methods\")\nprint(cif.CN_unique_values_by_best_methods)\n\n# Average coordination number\nprint(\"\\nCN_avg_by_min_dist_method:\")\nprint(cif.CN_avg_by_min_dist_method)\n\nprint(\"\\nCN_avg_by_best_methods: \")\nprint(cif.CN_avg_by_best_methods)\n\n# Min coordination number\nprint(\"\\nCN_max_by_min_dist_method:\")\nprint(cif.CN_max_by_min_dist_method)\n\nprint(\"\\nCN_max_by_best_methods:\")\nprint(cif.CN_max_by_best_methods)\n\n# Max coordination number\nprint(\"\\nCN_min_by_min_dist_method:\")\nprint(cif.CN_min_by_min_dist_method)\n\nprint(\"\\nCN_min_by_best_methods:\")\nprint(cif.CN_min_by_best_methods)\n</pre> from cifkit import Cif, Example  # Initialize cif = Cif(Example.ErCoIn5_file_path)  # Bond counts print(\"\\nCN_bond_count_by_min_dist_method:\") print(cif.CN_bond_count_by_min_dist_method)  print(\"\\nCN_bond_count_by_min_dist_method_sorted_by_mendeleev:\") print(cif.CN_bond_count_by_min_dist_method_sorted_by_mendeleev)  print(\"\\nCN_bond_count_by_best_methods:\") print(cif.CN_bond_count_by_best_methods)  print(\"\\nCN_bond_count_by_best_methods_sorted_by_mendeleev:\") print(cif.CN_bond_count_by_best_methods_sorted_by_mendeleev)  # Bond fractions print(\"\\nCN_bond_fractions_by_min_dist_method:\") print(cif.CN_bond_fractions_by_min_dist_method)  print(\"\\nCN_bond_fractions_by_min_dist_method_sorted_by_mendeleev:\") print(cif.CN_bond_fractions_by_min_dist_method_sorted_by_mendeleev)  print(\"\\nCN_bond_fractions_by_best_methods:\") print(cif.CN_bond_fractions_by_best_methods)  print(\"\\nCN_bond_fractions_by_best_methods_sorted_by_mendeleev:\") print(cif.CN_bond_fractions_by_best_methods_sorted_by_mendeleev)  # Unique coordination numbers print(\"\\nCN_unique_values_by_min_dist_method\") print(cif.CN_unique_values_by_min_dist_method)  print(\"\\nCN_unique_values_by_best_methods\") print(cif.CN_unique_values_by_best_methods)  # Average coordination number print(\"\\nCN_avg_by_min_dist_method:\") print(cif.CN_avg_by_min_dist_method)  print(\"\\nCN_avg_by_best_methods: \") print(cif.CN_avg_by_best_methods)  # Min coordination number print(\"\\nCN_max_by_min_dist_method:\") print(cif.CN_max_by_min_dist_method)  print(\"\\nCN_max_by_best_methods:\") print(cif.CN_max_by_best_methods)  # Max coordination number print(\"\\nCN_min_by_min_dist_method:\") print(cif.CN_min_by_min_dist_method)  print(\"\\nCN_min_by_best_methods:\") print(cif.CN_min_by_best_methods) In\u00a0[\u00a0]: Copied! <pre>from cifkit import Cif, Example\nimport warnings\nwarnings.filterwarnings('ignore') # For Jupyter Notebook only\n\n# Initialize\ncif = Cif(Example.ErCoIn5_file_path)\n\n# Enter site labels. you can get site labels using cif.labels\nprint(\"Site labels:\", cif.site_labels)\n\n# Plot\ncif.plot_polyhedron(\"In1\", is_displayed=True)\n</pre> from cifkit import Cif, Example import warnings warnings.filterwarnings('ignore') # For Jupyter Notebook only  # Initialize cif = Cif(Example.ErCoIn5_file_path)  # Enter site labels. you can get site labels using cif.labels print(\"Site labels:\", cif.site_labels)  # Plot cif.plot_polyhedron(\"In1\", is_displayed=True)"},{"location":"notebooks/01_cif/#cif","title":"CIF\u00b6","text":"<p>The <code>Cif</code> class generates an object for each <code>.cif</code> file. Each object can</p> <ul> <li>compute the coordination numbers for each site label using four methods</li> <li>compute bond fractions and bond counts at each site within the specified cutoff radius or based on -coordination number geometry</li> <li>categorize atomic mixing at bond-pair and file levels</li> <li>list all possible bond and label pairs derived from the formula</li> <li>generate a unit cell and a supercell by applying \u00b11 shifts</li> <li>parse formulas, structures, tags, space group names, supercell sizes, and elements</li> </ul>"},{"location":"notebooks/01_cif/#get-instant-properties-parsed-information","title":"Get instant properties - parsed information\u00b6","text":"<p>The <code>Cif</code> class provides a set of accessible properties that can be accessed. Each object is initialized with the <code>file_path</code> to the <code>.cif</code> file.</p>"},{"location":"notebooks/01_cif/#how-tag-is-parsed","title":"How tag is parsed\u00b6","text":"<p>Tag is parsed from the third line of each <code>.cif</code> file. Some databases such as Pearson's Crystal Data offers tags for each file.</p>"},{"location":"notebooks/01_cif/#get-instant-properties-bond-pairs","title":"Get instant properties - bond pairs\u00b6","text":"<ul> <li>The following code returns all possible element and site pairs from the formula in the .cif file.</li> <li>The <code>mixing_info_per_label_pair</code> and <code>mixing_info_per_label_pair_sorted_by_mendeleev</code> return site mixing information at the pair level.</li> </ul>"},{"location":"notebooks/01_cif/#how-atomic-mixing-type-is-defined","title":"How atomic mixing type is defined\u00b6","text":"<p>Each bonding pair or each file is defined with one of four atomic mixing categories:</p> <ul> <li>Full occupancy is assigned when a single atomic site occupies the fractional coordinate with an occupancy value of 1.</li> <li>Full occupancy with atomic mixing is assigned when multiple atomic sites collectively occupy the fractional coordinate to a sum of 1.</li> <li>Deficiency without atomic mixing is assigned when a single atomic site occupying the fractional coordinate with a sum less than 1.</li> <li>Deficiency with atomic mixing is assigned when multiple atomic sites occupy the fractional coordinate with a sum less than 1.</li> </ul>"},{"location":"notebooks/01_cif/#get-computed-properties-nearest-connections-per-site","title":"Get computed properties - nearest connections per site\u00b6","text":"<p>This section involves computing distances between atoms. Unlike instant properties, these properties may require extensive computation, typically ranging from 1-2 seconds for larger supercells containing more than 3,000 atoms.</p> <p>These properties are loaded lazily, meaning accessing any of the properties will execute <code>compute_connections()</code> internally. This function will then compute <code>connections</code>, providing all the nearest neighbors for each site.</p> <p>There are options in the <code>Cif</code> class to use either the <code>by_d_min_method</code> or <code>by_best_methods</code>. Please refer to the <code>README.md</code> for complete documentation.</p>"},{"location":"notebooks/01_cif/#get-computed-properties-distances","title":"Get computed properties - distances\u00b6","text":"<p>You can get the shortest distance from each site label or the shortest distance for each possible bond pair.</p>"},{"location":"notebooks/01_cif/#get-computed-properties-coordination-numbers","title":"Get computed properties - coordination numbers\u00b6","text":"<p>Compute <code>avg</code>, <code>min</code>, <code>max</code>, <code>unique</code> of coordination numbers determined by one of the best methods or min distance method.</p>"},{"location":"notebooks/01_cif/#draw-polyhedrons","title":"Draw polyhedrons\u00b6","text":"<p>You may use <code>Jupyter</code> notebook or a python script to execute the following to generate and save a polyhedron generated from each site and the nearest neighbor atoms are determined from the coordination number geometry.</p>"},{"location":"notebooks/02_cif_ensemble/","title":"CifEnsemble","text":"In\u00a0[\u00a0]: Copied! <pre>from cifkit import CifEnsemble, Example\n\n# Initialize\nensemble = CifEnsemble(Example.demo_folder_path)\n</pre> from cifkit import CifEnsemble, Example  # Initialize ensemble = CifEnsemble(Example.demo_folder_path) In\u00a0[\u00a0]: Copied! <pre># Initialize with nested .cif files in the folder\nensemble_nested = CifEnsemble(Example.demo_folder_path, add_nested_files=True)\n</pre>  # Initialize with nested .cif files in the folder ensemble_nested = CifEnsemble(Example.demo_folder_path, add_nested_files=True) In\u00a0[\u00a0]: Copied! <pre># Get .cif file count in the folder\nprint(\"File count:\", ensemble.file_count) # 6\n\n# Get the directory path\nprint(\"Directory path:\", ensemble.dir_path)\n\n# Get all file paths in the folder\nprint(\"File paths:\", ensemble.file_paths)\n\n# Get all Cif objects initialized\nprint(\"Cif objects:\", ensemble.cifs)\n</pre> # Get .cif file count in the folder print(\"File count:\", ensemble.file_count) # 6  # Get the directory path print(\"Directory path:\", ensemble.dir_path)  # Get all file paths in the folder print(\"File paths:\", ensemble.file_paths)  # Get all Cif objects initialized print(\"Cif objects:\", ensemble.cifs) In\u00a0[\u00a0]: Copied! <pre># Print each property for each .cif file\nfor cif in ensemble.cifs:\n  print(f\"\\n{cif.file_name}\")\n  print(\"Formula:\", cif.formula)\n  print(\"Tag:\", cif.tag)\n  print(\"Mixing type:\", cif.site_mixing_type)\n  print(\"Unique bond pairs:\", cif.bond_pairs)\n</pre> # Print each property for each .cif file for cif in ensemble.cifs:   print(f\"\\n{cif.file_name}\")   print(\"Formula:\", cif.formula)   print(\"Tag:\", cif.tag)   print(\"Mixing type:\", cif.site_mixing_type)   print(\"Unique bond pairs:\", cif.bond_pairs) In\u00a0[\u00a0]: Copied! <pre># Get unique formulas\nprint(\"Unique formulas:\", ensemble.unique_formulas)\n\n# Get unique elements\nprint(\"Unique elements:\", ensemble.unique_elements)\n\n# Get unique structures\nprint(\"Unique structures:\", ensemble.unique_structures)\n\n# Get unique atomix mixing types\nprint(\"Unique atomic mixing types:\", ensemble.unique_site_mixing_types)\n\n# Get unique elements\nprint(\"Unique elements including nested:\", ensemble_nested.unique_elements)\n\n# Get unique space group names\nprint(\"Unique space group names:\", ensemble.unique_space_group_names)\n\n# Get unique space group numbers\nprint(\"Unique space group numbers:\",ensemble.unique_space_group_numbers)\n\n# Get unique tags\nprint(\"Unique tags:\", ensemble.unique_tags)\n\n# Get unique composition types\nprint(\"Unique composition types:\", ensemble.unique_composition_types)\n</pre> # Get unique formulas print(\"Unique formulas:\", ensemble.unique_formulas)  # Get unique elements print(\"Unique elements:\", ensemble.unique_elements)  # Get unique structures print(\"Unique structures:\", ensemble.unique_structures)  # Get unique atomix mixing types print(\"Unique atomic mixing types:\", ensemble.unique_site_mixing_types)  # Get unique elements print(\"Unique elements including nested:\", ensemble_nested.unique_elements)  # Get unique space group names print(\"Unique space group names:\", ensemble.unique_space_group_names)  # Get unique space group numbers print(\"Unique space group numbers:\",ensemble.unique_space_group_numbers)  # Get unique tags print(\"Unique tags:\", ensemble.unique_tags)  # Get unique composition types print(\"Unique composition types:\", ensemble.unique_composition_types) In\u00a0[\u00a0]: Copied! <pre># Get file count per structure\nprint(\"Structure stats:\", ensemble.structure_stats)\n\n# Get file count per formula\nprint(\"Formula stats:\", ensemble.formula_stats)\n\n# Get file count per tag\nprint(\"Tag stats:\", ensemble.tag_stats)\n\n# Get file count per space group number\nprint(\"Space group number stats:\", ensemble.space_group_number_stats)\n\n# Get file count per space group name\nprint(\"Space group name stats:\", ensemble.space_group_name_stats)\n\n# Get file count per composition type\nprint(\"Composition type stats:\", ensemble.composition_type_stats)\n\n# Get file count per Element\nprint(\"Unique elements stats:\", ensemble.unique_elements_stats)\n\n# Get file count per site mixing type\nprint(\"Site mixing type stats:\", ensemble.site_mixing_type_stats)\n\n# Get file count per supercell atom count\nprint(\"Supercell size stats:\", ensemble.supercell_size_stats)\n\n# Get file count per CN value by min dist method\nprint(\"CN value using min dist method stats:\", ensemble.unique_CN_values_by_min_dist_method_stat)\n\n# Get file count per CN value by best methods\nprint(\"CN value using best methods stats:\", ensemble.unique_CN_values_by_method_methods_stat)\n</pre> # Get file count per structure print(\"Structure stats:\", ensemble.structure_stats)  # Get file count per formula print(\"Formula stats:\", ensemble.formula_stats)  # Get file count per tag print(\"Tag stats:\", ensemble.tag_stats)  # Get file count per space group number print(\"Space group number stats:\", ensemble.space_group_number_stats)  # Get file count per space group name print(\"Space group name stats:\", ensemble.space_group_name_stats)  # Get file count per composition type print(\"Composition type stats:\", ensemble.composition_type_stats)  # Get file count per Element print(\"Unique elements stats:\", ensemble.unique_elements_stats)  # Get file count per site mixing type print(\"Site mixing type stats:\", ensemble.site_mixing_type_stats)  # Get file count per supercell atom count print(\"Supercell size stats:\", ensemble.supercell_size_stats)  # Get file count per CN value by min dist method print(\"CN value using min dist method stats:\", ensemble.unique_CN_values_by_min_dist_method_stat)  # Get file count per CN value by best methods print(\"CN value using best methods stats:\", ensemble.unique_CN_values_by_method_methods_stat) In\u00a0[\u00a0]: Copied! <pre># Return file paths by formulas\nensemble.filter_by_formulas([\"ErCoIn\", \"Er10Co9In20\"]) \n\n# Return file paths by structures\nensemble.filter_by_structures([\"Mn5Si3\"])\n\n# Return file paths by space group names\nensemble.filter_by_space_group_names([\"P4/mmm\"])\n\n# Return file paths by space group numbers\nensemble.filter_by_space_group_numbers([123])\n\n# Return file paths by site mixing types\nensemble.filter_by_site_mixing_types([\"full_occupancy\"])\nensemble.filter_by_site_mixing_types([\"full_occupancy\", \"deficiency_without_atomic_mixing\"])\n\n# Return file paths by composition types (1-&gt; unary, 2-&gt; binary)\nensemble.filter_by_composition_types([3])\n</pre> # Return file paths by formulas ensemble.filter_by_formulas([\"ErCoIn\", \"Er10Co9In20\"])   # Return file paths by structures ensemble.filter_by_structures([\"Mn5Si3\"])  # Return file paths by space group names ensemble.filter_by_space_group_names([\"P4/mmm\"])  # Return file paths by space group numbers ensemble.filter_by_space_group_numbers([123])  # Return file paths by site mixing types ensemble.filter_by_site_mixing_types([\"full_occupancy\"]) ensemble.filter_by_site_mixing_types([\"full_occupancy\", \"deficiency_without_atomic_mixing\"])  # Return file paths by composition types (1-&gt; unary, 2-&gt; binary) ensemble.filter_by_composition_types([3])   In\u00a0[\u00a0]: Copied! <pre>print(\"\\nFile paths containing Er or Co or In:\")\nprint(ensemble.filter_by_elements_containing([\"Er\", \"Co\", \"In\"])) # \n\nprint(\"\\nFile paths containing Er and In:\")\nprint(ensemble.filter_by_elements_exact_matching([\"Er\", \"In\"]))\n\nprint(\"\\nFile paths containing CN value of 15:\")\nprint(ensemble.filter_by_CN_min_dist_method_containing([15]))\nprint(ensemble.filter_by_CN_best_methods_containing([15]))\n\nprint(\"\\nFile paths containing CN value of 11, 14, and 15:\")\nprint(ensemble.filter_by_CN_min_dist_method_exact_matching([11, 14, 15]))\nprint(ensemble.filter_by_CN_best_methods_exact_matching([11, 14, 15]))\n</pre>  print(\"\\nFile paths containing Er or Co or In:\") print(ensemble.filter_by_elements_containing([\"Er\", \"Co\", \"In\"])) #   print(\"\\nFile paths containing Er and In:\") print(ensemble.filter_by_elements_exact_matching([\"Er\", \"In\"]))  print(\"\\nFile paths containing CN value of 15:\") print(ensemble.filter_by_CN_min_dist_method_containing([15])) print(ensemble.filter_by_CN_best_methods_containing([15]))  print(\"\\nFile paths containing CN value of 11, 14, and 15:\") print(ensemble.filter_by_CN_min_dist_method_exact_matching([11, 14, 15])) print(ensemble.filter_by_CN_best_methods_exact_matching([11, 14, 15])) In\u00a0[\u00a0]: Copied! <pre># Return a set of .cif file paths with min distance between 1.0 \u00c5 and 3.0 \u00c5\nprint(\"File paths with min distance between 1.0 \u00c5 and 3.0 \u00c5:\\n\", ensemble.filter_by_min_distance(1.0, 3.0))\n\n# Return a set of .cif file paths with supercell atom count above 500 and below 3000.\nprint(\"File paths with supercell atom count above 500 and below 3000:\\n\",ensemble.filter_by_supercell_count(300, 3000))\n</pre> # Return a set of .cif file paths with min distance between 1.0 \u00c5 and 3.0 \u00c5 print(\"File paths with min distance between 1.0 \u00c5 and 3.0 \u00c5:\\n\", ensemble.filter_by_min_distance(1.0, 3.0))  # Return a set of .cif file paths with supercell atom count above 500 and below 3000. print(\"File paths with supercell atom count above 500 and below 3000:\\n\",ensemble.filter_by_supercell_count(300, 3000)) In\u00a0[\u00a0]: Copied! <pre>ensemble = CifEnsemble(Example.ErCoIn_big_folder_path)\nensemble.generate_structure_histogram()\nensemble.generate_formula_histogram()\nensemble.generate_tag_histogram()\nensemble.generate_space_group_number_histogram()\nensemble.generate_space_group_name_histogram()\nensemble.generate_supercell_size_histogram()\nensemble.generate_elements_histogram()\nensemble.generate_CN_by_min_dist_method_histogram()\nensemble.generate_CN_by_best_methods_histogram()\nensemble.generate_composition_type_histogram()\nensemble.generate_site_mixing_type_histogram()\n\n'''\n# Optional: Specify the output directory where the .png file will be saved.\nensemble.generate_site_mixing_type_histogram(output_dir=\"path/to/directory\")\n\n# Optional: Call plt.show() to display the histogram on screen.\nensemble.generate_site_mixing_type_histogram(display=True)\n'''\n</pre> ensemble = CifEnsemble(Example.ErCoIn_big_folder_path) ensemble.generate_structure_histogram() ensemble.generate_formula_histogram() ensemble.generate_tag_histogram() ensemble.generate_space_group_number_histogram() ensemble.generate_space_group_name_histogram() ensemble.generate_supercell_size_histogram() ensemble.generate_elements_histogram() ensemble.generate_CN_by_min_dist_method_histogram() ensemble.generate_CN_by_best_methods_histogram() ensemble.generate_composition_type_histogram() ensemble.generate_site_mixing_type_histogram()  ''' # Optional: Specify the output directory where the .png file will be saved. ensemble.generate_site_mixing_type_histogram(output_dir=\"path/to/directory\")  # Optional: Call plt.show() to display the histogram on screen. ensemble.generate_site_mixing_type_histogram(display=True) '''"},{"location":"notebooks/02_cif_ensemble/#initialize-with-nested-files","title":"Initialize with nested files\u00b6","text":"<p>You can also use the <code>add_nested_files</code> flag to include <code>.cif</code> files that are located in folders within the folder path provided.</p>"},{"location":"notebooks/02_cif_ensemble/#get-instant-properties","title":"Get instant properties\u00b6","text":"<p>Once the object is created, you can get instant properties suhc as file count, folder path, etc.</p>"},{"location":"notebooks/02_cif_ensemble/#get-individual-cif-properties","title":"Get individual .cif properties\u00b6","text":"<p>The <code>CifEnsemble</code> object contains a property called <code>cifs</code> which contains a list of <code>Cif</code> objects. You may loop through each to access both instant and computed properties described in the previous <code>CIF</code> section.</p>"},{"location":"notebooks/02_cif_ensemble/#get-unique-properties","title":"Get unique properties\u00b6","text":"<p>You can get all unique attributes such as formulas, elements, etc in the folder.</p>"},{"location":"notebooks/02_cif_ensemble/#get-overall-stats-by-attribute","title":"Get overall stats by attribute\u00b6","text":"<p>Get the number of files for each unique properties.</p>"},{"location":"notebooks/02_cif_ensemble/#filter-cif-containing-specific-attributes","title":"Filter .cif containing specific attributes\u00b6","text":""},{"location":"notebooks/02_cif_ensemble/#filter-cif-by-specific-attributes","title":"Filter .cif by specific attributes\u00b6","text":"<p>Filter .cif files either containing a set of items or files that exactly contain the values passed. <code>cifkit</code> supports elements and coordination numbers.</p>"},{"location":"notebooks/02_cif_ensemble/#filter-by-range","title":"Filter by range\u00b6","text":""},{"location":"notebooks/02_cif_ensemble/#move-and-copy-files","title":"Move and copy files\u00b6","text":"<p>Assume you have a set of file paths filered using the functions described in the previous section. Since we are using Jupyter and with predefined examples, you need to provide <code>file_paths</code> and <code>dest_dir_path</code> for your system.</p> <pre>file_paths = {\n    \"tests/data/cif/ensemble_test/300169.cif\",\n    \"tests/data/cif/ensemble_test/300171.cif\",\n    \"tests/data/cif/ensemble_test/300170.cif\",\n}\n\n# To move files\nensemble.move_cif_files(file_paths, dest_dir_path)\n\n# To copy files\nensemble.copy_cif_files(file_paths, dest_dir_path)\n</pre>"},{"location":"notebooks/02_cif_ensemble/#generate-histograms","title":"Generate histograms\u00b6","text":""}]}