{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CIF\n",
    "\n",
    "The `Cif` class generates an object for each `.cif` file. Each object can\n",
    "\n",
    "- compute the coordination numbers for each site label using four methods\n",
    "- compute bond fractions and bond counts at each site within the specified cutoff radius or based on -coordination number geometry\n",
    "- categorize atomic mixing at bond-pair and file levels\n",
    "- list all possible bond and label pairs derived from the formula\n",
    "- generate a unit cell and a supercell by applying Â±1 shifts\n",
    "- parse formulas, structures, tags, space group names, supercell sizes, and elements\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can initialize `Cif` object using a file path to the `.cif` file. Or you can simply use the example `.cif` provided in `cifkit` below.\n",
    "\n",
    "In `cifkit` we provide .cif files that can be accessed through `from cifkit import Example` as shown below. For advancuser, these example .cif files are located under `src/cifkit/data` in the package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cifkit import Example\n",
    "from cifkit import Cif\n",
    "\n",
    "# Initialize with the example file provided\n",
    "cif = Cif(Example.GdSb_file_path)\n",
    "\n",
    "# Print attributes\n",
    "print(\"File name:\", cif.file_name)\n",
    "print(\"Formula:\", cif.formula)\n",
    "print(\"Unique element:\", cif.unique_elements)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get instant properties - parsed information\n",
    "\n",
    "The `Cif` class provides a set of accessible properties that can be accessed. Each object is initialized with the `file_path` to the `.cif` file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cifkit import Cif, Example\n",
    "import json\n",
    "\n",
    "# Utility function for printing dictionary\n",
    "def prettify_dict(dict_data):\n",
    "  return json.dumps(dict_data, indent=4)\n",
    "\n",
    "# Initialize\n",
    "cif = Cif(Example.GdSb_file_path)\n",
    "\n",
    "# Print instantly available properties\n",
    "print(\"Formula:\", cif.formula)\n",
    "print(\"Structure:\", cif.structure)\n",
    "print(\"Unique elements:\", cif.unique_elements)\n",
    "print(\"Unitcell lengths:\", cif.unitcell_lengths)\n",
    "print(\"Unitcell angles:\", cif.unitcell_angles)\n",
    "print(\"Site labels:\", cif.site_labels)\n",
    "print(\"Weight:\", cif.weight)\n",
    "print(\"Atomic mixing type:\", cif.site_mixing_type)\n",
    "print(\"Space group number:\", cif.space_group_number)\n",
    "print(\"Space group number:\", cif.space_group_name)\n",
    "print(\"Composition type:\", cif.composition_type) # 3 -> Ternary\n",
    "print(\"Tag:\", cif.tag)\n",
    "print(\"Atom_site_info:\", prettify_dict(cif.atom_site_info))\n",
    "print(\"Wyckoff_symbol of Gd:\", cif.atom_site_info[\"Gd\"][\"wyckoff_symbol\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How tag is parsed\n",
    "\n",
    "Tag is parsed from the third line of each `.cif` file. Some databases such as Pearson's Crystal Data offers tags for each file.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get instant properties - bond pairs\n",
    "\n",
    "- The following code returns all possible element and site pairs from the formula in the .cif file.\n",
    "- The `mixing_info_per_label_pair` and `mixing_info_per_label_pair_sorted_by_mendeleev` return site mixing information at the pair level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cifkit import Cif, Example\n",
    "\n",
    "# Initialize\n",
    "cif = Cif(Example.GdSb_file_path)\n",
    "\n",
    "# Utility function for printing a set of tuples\n",
    "def print_tuples(tuples):\n",
    "  for pair in tuples:\n",
    "    print(f\"({pair[0]}, {pair[1]})\")\n",
    "\n",
    "# All bond pairs\n",
    "print(\"\\nAll possible bond pairs:\")\n",
    "print_tuples(cif.bond_pairs)\n",
    "\n",
    "print(\"\\nAll possible bond pairs sorted by Mendeleev:\")\n",
    "print_tuples(cif.bond_pairs_sorted_by_mendeleev)\n",
    "\n",
    "# All label pairs\n",
    "print(\"\\nAll possible label pairs from the formula:\")\n",
    "print_tuples(cif.site_label_pairs)\n",
    "\n",
    "print(\"\\nAll possible label pairs sorted by Mendeleev:\")\n",
    "print_tuples(cif.site_label_pairs_sorted_by_mendeleev)\n",
    "\n",
    "# Atomic mixing per pair\n",
    "print(\"\\nAtomic mixing per label pair:\")\n",
    "print((cif.mixing_info_per_label_pair))\n",
    "\n",
    "print(\"\\nAtomic mixing per label pair sorted by Mendeleev:\")\n",
    "print(cif.mixing_info_per_label_pair_sorted_by_mendeleev)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How atomic mixing type is defined\n",
    "\n",
    "Each bonding pair or each file is defined with one of four atomic mixing categories:\n",
    "\n",
    "- **Full occupancy** is assigned when a single atomic site occupies the fractional coordinate with an occupancy value of 1.\n",
    "- **Full occupancy with atomic mixing** is assigned when multiple atomic sites collectively occupy the fractional coordinate to a sum of 1.\n",
    "- **Deficiency without atomic mixing** is assigned when a single atomic site occupying the fractional coordinate with a sum less than 1.\n",
    "- **Deficiency with atomic mixing** is assigned when multiple atomic sites occupy the fractional coordinate with a sum less than 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get computed properties - nearest connections per site\n",
    "\n",
    "This section involves computing distances between atoms. Unlike instant properties, these properties may require extensive computation, typically ranging from 1-2 seconds for larger supercells containing more than 3,000 atoms.\n",
    "\n",
    "These properties are loaded lazily, meaning accessing any of the properties will execute `compute_connections()` internally. This function will then compute `connections`, providing all the nearest neighbors for each site.\n",
    "\n",
    "There are options in the `Cif` class to use either the `by_d_min_method` or `by_best_methods`. Please refer to the `README.md` for complete documentation.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_connected_points(all_labels_connections):\n",
    "    \"\"\"\n",
    "    Utility function for printing connections per site label\n",
    "    \"\"\"\n",
    "    for label, connections in all_labels_connections.items():\n",
    "        print(f\"\\nAtom site {label}:\")\n",
    "        for (\n",
    "            connected_label,\n",
    "            dist,\n",
    "            coords_1,\n",
    "            coords_2,\n",
    "        ) in connections:\n",
    "            print(f\"{connected_label} {dist} {coords_1}, {coords_2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute CN connections\n",
    "cif.compute_CN()\n",
    "\n",
    "# Print CN Connections\n",
    "print(\"\\nFind CN_connections_by_min_dist_method:\")\n",
    "print_connected_points(cif.CN_connections_by_min_dist_method)\n",
    "\n",
    "print(\"\\nFind CN_connections_by_best_methods:\")\n",
    "print_connected_points(cif.CN_connections_by_best_methods)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get computed properties - distances\n",
    "\n",
    "You can get the shortest distance from each site label or the shortest distance for each possible bond pair."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Shortest distance:\", cif.shortest_distance)\n",
    "print(\"Shortest bond pair distances:\", cif.shortest_bond_pair_distance)\n",
    "print(\"Shortest site pair distances:\", cif.shortest_site_pair_distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bond counts\n",
    "print(\"\\nCN_bond_count_by_min_dist_method:\")\n",
    "print(cif.CN_bond_count_by_min_dist_method)\n",
    "\n",
    "print(\"\\nCN_bond_count_by_min_dist_method_sorted_by_mendeleev:\")\n",
    "print(cif.CN_bond_count_by_min_dist_method_sorted_by_mendeleev)\n",
    "\n",
    "print(\"\\nCN_bond_count_by_best_methods:\")\n",
    "print(cif.CN_bond_count_by_best_methods)\n",
    "\n",
    "print(\"\\nCN_bond_count_by_best_methods_sorted_by_mendeleev:\")\n",
    "print(cif.CN_bond_count_by_best_methods_sorted_by_mendeleev)\n",
    "\n",
    "# Bond fractions\n",
    "print(\"\\nCN_bond_fractions_by_min_dist_method:\")\n",
    "print(cif.CN_bond_fractions_by_min_dist_method)\n",
    "\n",
    "print(\"\\nCN_bond_fractions_by_min_dist_method_sorted_by_mendeleev:\")\n",
    "print(cif.CN_bond_fractions_by_min_dist_method_sorted_by_mendeleev)\n",
    "\n",
    "print(\"\\nCN_bond_fractions_by_best_methods:\")\n",
    "print(cif.CN_bond_fractions_by_best_methods)\n",
    "\n",
    "print(\"\\nCN_bond_fractions_by_best_methods_sorted_by_mendeleev:\")\n",
    "print(cif.CN_bond_fractions_by_best_methods_sorted_by_mendeleev)\n",
    "\n",
    "# Unique coordination numbers\n",
    "print(\"\\nCN_unique_values_by_min_dist_method\")\n",
    "print(cif.CN_unique_values_by_min_dist_method)\n",
    "\n",
    "print(\"\\nCN_unique_values_by_best_methods\")\n",
    "print(cif.CN_unique_values_by_best_methods)\n",
    "\n",
    "# Average coordination number\n",
    "print(\"\\nCN_avg_by_min_dist_method:\")\n",
    "print(cif.CN_avg_by_min_dist_method)\n",
    "\n",
    "print(\"\\nCN_avg_by_best_methods: \")\n",
    "print(cif.CN_avg_by_best_methods)\n",
    "\n",
    "# Min coordination number\n",
    "print(\"\\nCN_max_by_min_dist_method:\")\n",
    "print(cif.CN_max_by_min_dist_method)\n",
    "\n",
    "print(\"\\nCN_max_by_best_methods:\")\n",
    "print(cif.CN_max_by_best_methods)\n",
    "\n",
    "# Max coordination number\n",
    "print(\"\\nCN_min_by_min_dist_method:\")\n",
    "print(cif.CN_min_by_min_dist_method)\n",
    "\n",
    "print(\"\\nCN_min_by_best_methods:\")\n",
    "print(cif.CN_min_by_best_methods)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Draw polyhedrons\n",
    "\n",
    "You may use `Jupyter` notebook or a python script to execute the following to generate and save a polyhedron generated from each site and the nearest neighbor atoms are determined from the coordination number geometry.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cifkit import Cif, Example\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore') # For Jupyter Notebook only\n",
    "\n",
    "\n",
    "# Enter site labels. you can get site labels using cif.labels\n",
    "print(\"Site labels:\", cif.site_labels)\n",
    "\n",
    "# Plot\n",
    "cif.plot_polyhedron(\"Sb\", is_displayed=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "cifkit-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
